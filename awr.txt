name: "AWRNet"

layer { 
  name: 'input' 
  type: 'Input' 
  top: "input"
  top: "label"
  top: "adv"
  input_param {
    shape: { dim: 256 dim: 5 } 
    shape: { dim: 256 dim: 2 }
    shape: { dim: 256}
  }
  include: { phase: TRAIN }
}

layer { 
  name: 'input'
  type: 'Input'
  top: 'input'
  input_param { 
    shape: { dim: 1 dim: 5 } 
  } 

  include: { phase: TEST }
}

layer {
  name: "ip0"
  type: "InnerProduct"
  bottom: "input"
  top: "ip0"
  param {
    lr_mult: 1
	decay_mult: 1
  }
  param {
    lr_mult: 2
	decay_mult: 0
  }
  inner_product_param {
    num_output: 128
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu0"
  type: "ReLU"
  bottom: "ip0"
  top: "relu0"
}

layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "relu0"
  top: "ip1"
  param {
    lr_mult: 1
	decay_mult: 1
  }
  param {
    lr_mult: 1
	decay_mult: 0
  }
  inner_product_param {
    num_output: 64
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "relu1"
}

layer {
  name: "output"
  type: "InnerProduct"
  bottom: "relu1"
  top: "output"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "logstd"
  type: "Parameter"
  top: "logstd"
  param {
    lr_mult: 1
  }
  parameter_param {
    shape: { dim: 1 dim: 2 } 
  }
}

layer {
  name: "std"
  type: "Exp"
  bottom: "logstd"
  top: "std"
}
layer {
  name: "1/std"
  type: "Power"
  top: "1/std"
  bottom: "std"
  power_param {
    power: -1
    shift: 1e-8
  }
  include: { phase: TRAIN }
}
layer {
  name: "x"
  type: "Eltwise"
  bottom: "output"
  bottom: "label"
  top: "x"
  eltwise_param {
    operation: SUM
    coeff: 1.0
    coeff: -1.0
  }
  include: { phase: TRAIN }
}
layer {
  name: "std_tile"
  type: "Tile"
  bottom: "1/std"
  top: "std_tile"
  tile_param {
    axis: 0
    tiles: 256
  }
  include: { phase: TRAIN }
}
layer {
  name: "x/std"
  type: "Eltwise"
  bottom: "x"
  bottom: "std_tile"
  top: "x/std"
  eltwise_param {
    operation: PROD
  }
  include: { phase: TRAIN }
}
layer {
  name: "(x/std)^2"
  type: "Power"
  bottom: "x/std"
  top: "(x/std)^2"
  power_param {
    power: 2.0
  }
  include: { phase: TRAIN }
}
layer {
	name: "entropy"
	type: "Power"
	bottom: "logstd"
	top: "entropy"
	power_param {
		shift: 0.9189385332046727
	}
	include: { phase: TRAIN }
}
layer {
  name: "entropy_tile"
  type: "Tile"
  bottom: "entropy"
  top: "entropy_tile"
  tile_param {
    axis: 0
    tiles: 256
  }
  include: { phase: TRAIN }
}
layer {
  name: "logprob_"
  type: "Eltwise"
  bottom: "(x/std)^2"
  bottom: "entropy_tile"
  top: "logprob_"
  eltwise_param {
    operation: SUM
    coeff: -0.5
    coeff: -1.0
  }
  include: { phase: TRAIN }
}

layer {
  name: "logprob"
  type: "Reduction"
  bottom: "logprob_"
  top: "logprob"
  reduction_param{
       axis: 1
       operation: SUM
  }
  include: { phase: TRAIN }
}
layer {
  name: "prob"
  type: "Exp"
  bottom: "logprob"
  top: "prob"
  include: { phase: TRAIN }
}
layer {
  name: "adv_weight"
  type: "Exp"
  bottom: "adv"
  top: "adv_weight"
  include: { phase: TRAIN }
}
layer {
  name: "cliped"
  type: "Clip"
  bottom: "adv_weight"
  top: "cliped"
  clip_param {
  	max: 20
  	min: 0
  }
  include: { phase: TRAIN }
}
layer {
  name: "aLoss"
  type: "Eltwise"
  bottom: "logprob"
  bottom: "cliped"
  top: "aLoss"
  eltwise_param {
    operation: PROD
  }
  include: { phase: TRAIN }
}
layer {
  name: "awr_loss"
  type: "Reduction"
  bottom: "aLoss"
  top: "awr_loss"
  loss_weight: -1.0
  reduction_param{
       axis: 0
       operation: MEAN
  }
  include: { phase: TRAIN }
}
layer {
  name: "cliped_output"
  type: "Clip"
  bottom: "output"
  top: "cliped_output"
  clip_param {
  	max: 1.5
  	min: -1.5
  }
  include: { phase: TRAIN }
}
layer {
  name: "actLoss"
  type: "EuclideanLoss"
  bottom: "output"
  bottom: "cliped_output"
  top: "actLoss"
  include: { phase: TRAIN }
}